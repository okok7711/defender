"extended string functionality"

@export *
@import libs/maps::get
@import libs/logic::and
@import libs/arrays::each

$ascii = [
	97: 'a', 98: 'b', 99: 'c', 100: 'd', 101: 'e', 102: 'f', 103: 'g', 104: 'h',
	105: 'i', 106: 'j', 107: 'k', 108: 'l', 109: 'm', 110: 'n', 111: 'o', 112: 'p',
	113: 'q', 114: 'r', 115: 's', 116: 't', 117: 'u', 118: 'v', 119: 'w', 120: 'x',
	121: 'y', 122: 'z', 65: 'A', 66: 'B', 67: 'C', 68: 'D', 69: 'E', 70: 'F',
	71: 'G', 72: 'H', 73: 'I', 74: 'J', 75: 'K', 76: 'L', 77: 'M', 78: 'N', 79: 'O',
	80: 'P', 81: 'Q', 82: 'R', 83: 'S', 84: 'T', 85: 'U', 86: 'V', 87: 'W', 88: 'X',
	32: ' ', 33: '!', 10: '\n'
]

$numbers = [
	'1', '2', '3', '4', '5',
	'6', '7', '8', '9', '0'
]

$_baseTo = (s, left, right, sign) {
	$out = ""
	each(s, (element) {
		$idx = int(element)
		(bool(and(left < idx, idx < right))).then({
			out += ascii.get(idx + (sign * 32), element)
		}).else({
			out += element
		})
	})
	out
}

$toLower = (s) {
	"converts a string to lowercase"
	_baseTo(s, 64, 91, 1)
}


$toUpper = (s) {
	"converts a string to uppercase"
	_baseTo(s, 96, 123, -1)
}

$splice = (s, start, end) {
	"returns the substring of s[start:end]"
	"if end is -1, everything after start will be returned"
	(end == -1).then({end = s.len()})
	$out = ""
	$i = start
	while ({bool(and(i < end, i < s.len()))}, {
		out += s[i]
		i += 1
	})
	out
}

$startsWith = (original, check) {
	"check if a string (original) starts with a given string (check)"
	(original.splice(0, check.len()) == check).then({
		return true
	})
	return false
}

$replaceChar = (original, old, new) {
	"replace every occurence of a char old with new char"
	$out = ""
	each(original, (element){
		(element == old).then({
			out += new
		}).else({
			out += element
		})
	})
	out
}