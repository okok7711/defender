"extended array functionality"

@export *

@import libs/logic::and
@import libs/math

$copy = (a) {
    "makes a copy of an array, very inefficient"
    $out = []
    while ({out.len() < a.len()}, {
        out.push(a[out.len()])
    })
    out
}

$reverse = (arr) {
    "reverses an array"
    $clone = copy(arr)
    $middle = (clone.len()) / 2
    $start = 0
    $end = clone.len() - 1
    while ({start < end}, {
        clone.swap(start, end)
        start += 1
        end -= 1
    })
    clone
}

$join = (iterable, delim) {
    "joins every element of an array into a string"
    $out = ""
    $i = 0
    while ({i < iterable.len()}, {
        out += (str(iterable[i]) + delim)
        i += 1
    }) 
    out 
}

$extend = (arr1, arr2) {
    "extends one array into the other"
    $out = arr1
    $n = 0
    while ({n < arr2.len()}, {
        out.push(arr2[n])
        n += 1
    })
    out
}

$zip = (arr1, arr2) {
    $length = math::min(arr1.len(), arr2.len())
    $i = 0
    $out = []
    while ({i < length}, {
        out.push([arr1[i], arr2[i]])
        i += 1
    })
    out
}

$zeros = (size) {
    "returns an array of a given size filled with zeros"
    $out = []
    while ({out.len() < size}, {
        out.push(0)
    })
    out
}

$rightpad = (iterable, n, symbol) {
    "pads an iterable to size n with a given symbol to the right"
    $out = iterable
    while ({out.len() < n}, {
        out.push(symbol)
    })
    out
}

$leftpad = (iterable, n, symbol) {
    "pads an iterable to size n with a given symbol to the left"
    $out = []
    while ({out.len() + iterable.len() < n}, {
        out.push(symbol)
    })
    $i = 0
    while ({i < iterable.len()}, {
        out.push(iterable[i])
        i += 1
    })
    out
}

$find = (iterable, item) {
	"find an item in an iterable returns the items index"
	"return -1 if item is not contained"
	$i = 0
	while ({i < iterable.len()}, {
		(iterable[i] == item).then({return i})
		i += 1
	})
	return -1
}

$contains = (iterable, item) {
	"returns a boolean value of whether the given item is in the iterable"
	(find(iterable, item) == -1).then({return false}).else({return true})
}

$apply = (list, func) {
    "execute a function on each element of a list"
    $i = 0
    while({i < list.len()}, {
        list[i] = func(list[i])
        i += 1
    })
}

$each = (list, func) {
    "execute a function for every element of a list"
    $i = 0
    while({i < list.len()}, {
        func(list[i])
        i += 1
    })
}

$splice = (s, start, end) {
	"returns the array splice of s[start:end]"
	"if end is -1, everything after start will be returned"
	(end == -1).then({end = s.len()})
	$out = []
	$i = start
	while ({bool(and(i < end, i < s.len()))}, {
		out.push(s[i])
		i += 1
	})
	out
}