@export *
@import libs/math::(pow, max, abs, lshift)
@import libs/logic::(and, xor, or, not)
@import libs/strings::toUpper
@import libs/arrays::(join, leftpad, rightpad)

$str2int = (m) {
    "converts a string to an array of integers"
    $i = 0
    $out = []
    while ({ i < m.len() }, {
        out.push(int(m[i]))
        i += 1
    })
    out
}

$binarr2int = (arr) {
    "converts a binary array into an integer"
    $out = 0
    $i = 0
    while ({i < arr.len()}, {
        out += arr[i] * lshift(1, (arr.len() - i - 1))
        i += 1
    })
    out
}

$int2bin = (i) {
    "converts an integer into a binary array"
    $out = []
    $p = 0

    while ({i > 0}, {
        out.insert(0, i % 2)
        i = i / 2
        p += 1
    })

    out
}

$int2hex = (i) {
    "converts an integer into a hexadecimal string"
    $hexchars = "0123456789ABCDEF"
    $out = []
    $p = 0
    while ({i > 0}, {
        out.insert(0, hexchars[i % 16])
        i = i / 16
        p += 1
    })
    join(out, "")
}

$hex2int = (h) {
    "converts an integer into a hexadecimal string"
    h = h.toUpper()
    $i = 0
    $out = 0
    while ({i < h.len()}, {
        $idx = int(h[i])
        ( idx <= 58).then({
            out += (idx - 48) * lshift(1, 4 * (h.len() - i - 1))
        }).else({
            out += (idx - 55) * lshift(1, 4 * (h.len() - i - 1))
        })
        i += 1
    })
    out
}

$bitwise_op = (a, b, op) {
    "base method for bitwise computation on two components"
    $in1 = int2bin(a)
    $in2 = int2bin(b)

    in1 = leftpad(in1, in2.len(), 0) 
    in2 = leftpad(in2, in1.len(), 0) 

    $out = []

    while ({out.len() < in1.len()}, {
        out.push(op(in1[out.len()], in2[out.len()]))
    })
    
    binarr2int(out)
}

$bitwise_and = (a, b) {
    "compute the bitwise and of two numbers (a & b)"
    bitwise_op(a, b, and)
}

$bitwise_xor = (a, b) {
    "compute the bitwise xor of two numbers (a ^ b)"
    bitwise_op(a, b, xor)
}

$bitwise_or = (a, b) {
    "compute the bitwise or of two numbers (a | b)"
    bitwise_op(a, b, or)
}

$bitwise_not = (a) {
    "calculate the twos complement for a number"
    -a - 1
}

