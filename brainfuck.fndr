@import util::(zeros, each)

$ascii = [
	97: 'a', 98: 'b', 99: 'c', 100: 'd', 101: 'e', 102: 'f', 103: 'g', 104: 'h',
	105: 'i', 106: 'j', 107: 'k', 108: 'l', 109: 'm', 110: 'n', 111: 'o', 112: 'p',
	113: 'q', 114: 'r', 115: 's', 116: 't', 117: 'u', 118: 'v', 119: 'w', 120: 'x',
	121: 'y', 122: 'z', 65: 'A', 66: 'B', 67: 'C', 68: 'D', 69: 'E', 70: 'F',
	71: 'G', 72: 'H', 73: 'I', 74: 'J', 75: 'K', 76: 'L', 77: 'M', 78: 'N', 79: 'O',
	80: 'P', 81: 'Q', 82: 'R', 83: 'S', 84: 'T', 85: 'U', 86: 'V', 87: 'W', 88: 'X',
	32: ' ', 33: '!', 10: '\n'
]

$create_jump_table = (code) {
	$jump_table = [-1: -1]
	$left_positions = []
	$position = 0
	each(code, (character) {
		(character == "[").then({ 
			left_positions.push(position)
		})
		(character == "]").then({
			$left = left_positions.pop()
			$right = position
			jump_table.insert(left, right)
			jump_table.insert(right, left)
			
		})
		position += 1
	})
	jump_table
}

$interpret = (code, memsize) {
	$array = zeros(memsize)
	$jump_table = create_jump_table(code)
	$pointer = 0
	$i = 0
	while ({i < code.len()}, {
		(code[i] == "<").then({
			(pointer > 0).then({pointer -= 1})
		})
		(code[i] == ">").then({
			(pointer < memsize).then({pointer += 1})
		})
		(code[i] == "+").then({
			(array[pointer] != 256).then({array[pointer] += 1})
			
		})
		(code[i] == "-").then({
			(array[pointer] != 0).then({array[pointer] -= 1})
		})
		(code[i] == ".").then({
			print(ascii[array[pointer]])
		})
		(code[i] == ",").then({
			array[pointer] = int(readLine()[0])
		})
		(code[i] == '[').then({
			(array[pointer] == 0).then({
				i = jump_table[i] + 1
			})
		})
		(code[i] == ']').then({
			(array[pointer] != 0).then({
				i = jump_table[i] - 1
			})
		})
		i += 1
	})
	println("")
}


interpret("++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.", 30000)
