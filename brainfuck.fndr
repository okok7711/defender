@import libs/util::(zeros, apply)
@import libs/strings::(ascii)

$create_jump_table = (code) {
	$jump_table = [-1: -1]
	$left_positions = []
	$position = 0
	apply(code, (character) {
		(character == "[").then({ 
			left_positions.push(position)
		})
		(character == "]").then({
			$left = left_positions.pop()
			$right = position
			jump_table.insert(left, right)
			jump_table.insert(right, left)
			
		})
		position += 1
	})
	jump_table
}

$interpret = (code, memsize) {
	$array = zeros(memsize)
	$jump_table = create_jump_table(code)
	$pointer = 0
	$i = 0
	while ({i < code.len()}, {
		(code[i] == "<").then({
			(pointer > 0).then({pointer -= 1})
		})
		(code[i] == ">").then({
			(pointer < memsize).then({pointer += 1})
		})
		(code[i] == "+").then({
			(array[pointer] != 256).then({array[pointer] += 1})
			
		})
		(code[i] == "-").then({
			(array[pointer] != 0).then({array[pointer] -= 1})
		})
		(code[i] == ".").then({
			print(ascii[array[pointer]])
		})
		(code[i] == ",").then({
			array[pointer] = int(readLine()[0])
		})
		(code[i] == '[').then({
			(array[pointer] == 0).then({
				i = jump_table[i] + 1
			})
		})
		(code[i] == ']').then({
			(array[pointer] != 0).then({
				i = jump_table[i] - 1
			})
		})
		i += 1
	})
	println("")
}


interpret("++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.", 30000)
