#!/mnt/z/gits/Fender/target/debug/fender
@import libs/util
@import libs/logic
@import libs/math
@import libs/arrays

@export *

$u32 = util::hex2int("ffffffff")

$left_rotate = (n, b) {
    "Left rotate a 32-bit integer n by b bits."
    util::bitwise_and(
        util::bitwise_or(
            math::lshift(n, b),
            math::rshift(n, 32 - b)
        ),
        u32)
    }

$chunks = (iterable, size) {
    "Chunks the given iterable into parts of a given size"
    $out = []
    $idx = 0
    while ({idx < iterable.len()}, {
        $temp = []
        while ({temp.len() < size}, {
            temp.push(iterable[idx + temp.len()])
        })
        out.push(temp)
        idx += size
    })
    out
}

$sha1 = (m) {
    "computes the SHA-1 Hash digest of a given string"
    $h0 = util::hex2int("67452301")
    $h1 = util::hex2int("EFCDAB89")
    $h2 = util::hex2int("98BADCFE")
    $h3 = util::hex2int("10325476")
    $h4 = util::hex2int("C3D2E1F0")

    $bits = []
    $n = 0
    while({n < m.len()}, {
        $character = util::int2bin(int(m[n]))
        character = arrays::leftpad(character, 8, 0)
        arrays::extend(bits, character)
        n += 1
    })

    bits.push(1)

    $length = bits.len() - 1

    $pbits = bits

    while ({pbits.len() % 512 != 448}, {
        pbits.push(0)
    })

    arrays::extend(pbits, arrays::leftpad(
        util::int2bin(length), 64, 0)
    )
    $_c = 0
    $inital = chunks(pbits, 512)
    while ({_c < inital.len()}, {

        $words = chunks(inital[_c], 32)
        $w = arrays::zeros(80)

        n = 0

        while ({n < 16}, {
            w[n] = util::binarr2int(words[n])
            n += 1
        })

        $i = 16

        while ({i < 80}, { 
            $_s1 = util::bitwise_xor(w[i-3], w[i-8])
            $_s2 = util::bitwise_xor(_s1, w[i-14])
            $_s3 = util::bitwise_xor(_s2, w[i-16])
            w[i] = left_rotate(_s3, 1)
            i += 1
        })

        $a = h0
        $b = h1
        $c = h2
        $d = h3
        $e = h4
        
        i = 0

        while ({i < 80}, {
            $f = 0
            $k = 0

            (bool(logic::and(0 <= i, i <= 19))).then({
                $inner = util::bitwise_and(b, util::bitwise_xor(c, d))
                f = util::bitwise_xor(d, inner)
                k = util::hex2int("5A827999")
            })

            (bool(logic::and(20 <= i, i <= 39))).then({
                f = util::bitwise_xor(
                        util::bitwise_xor(b, c), d
                )
                k = util::hex2int("6ED9EBA1")
            })

            (bool(logic::and(40 <= i, i <= 59))).then({
                $left = util::bitwise_and(b, c)
                $middle = util::bitwise_and(b, d)
                $right = util::bitwise_and(c, d)
                f = util::bitwise_xor(
                        util::bitwise_xor(left, middle),
                    right)
                    k = util::hex2int("8F1BBCDC")
            })

            (bool(logic::and(60 <= i, i <= 79))).then({
                f = util::bitwise_xor(
                        util::bitwise_xor(b, c), d
                )
                k = util::hex2int("CA62C1D6")
            })

            $temp = util::bitwise_and(
                left_rotate(a, 5) + f + e + k + w[i],
                u32
            )

            e = d
            d = c
            c = left_rotate(b, 30)
            b = a
            a = temp

            i += 1
        })

        h0 = util::bitwise_and(a + h0, u32)
        h1 = util::bitwise_and(b + h1, u32)
        h2 = util::bitwise_and(c + h2, u32)
        h3 = util::bitwise_and(d + h3, u32)
        h4 = util::bitwise_and(e + h4, u32)

        _c += 1
    })

    $final = [h0, h1, h2, h3, h4]
    arrays::apply(final, util::int2hex)
    arrays::join(final, "")
}

sha1("")